# -*- coding: utf-8 -*-
"""
/***************************************************************************
 adr_pluginDialog
                                 A QGIS plugin
 Version 1 of ADR QGIS Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-05-05
        git sha              : $Format:%H$
        copyright            : (C) 2020 by J. Mitchell Green
        email                : green3jm@dukes.jmu.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.core import QgsProject
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from PyQt5.QtCore import QObject
from qgis.utils import iface
from qgis.core import QgsLayerTreeLayer, QgsMapLayer, QgsRasterLayer, QgsLayerTreeNode, QgsMapLayer, QgsRaster


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'adr_plugin_v1_dialog_base.ui'))


class adr_pluginDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(adr_pluginDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.iface = iface

        #objects for okay and cancel buttons for popup window
        self.accept = self.button_box.accepted.connect(self.okay)
        self.reject = self.button_box.rejected.connect(self.cancel)

        #gathers current GIS layers in QGIS and displays them in first drop-down menu
        self.layers = QgsProject.instance().layerTreeRoot().children()
        self.addComboBoxItems = self.comboBox_layer.addItems([layer.name() for layer in self.layers])
        
        #objects for GIS layer and raster band layer drop-downs
        self.comboBox_layer.activated.connect(self.userOption)
        self.comboBox_band.activated.connect(self.bandAction)
    
    def userOption(self):
        self.userChoice = self.comboBox_layer.currentText()

        #tests if selected layer is equal to layer in layer comboBox
        for i in self.layers:
            if i.name() != self.userChoice:
                continue
            else:
                self.soundLayer = i
                #call bandOption comboBox
                self.bandOption()
                break
        
    def bandOption(self):
        #clear combobox
        self.comboBox_band.clear()
        #convert form QgsLayerTreeLayer object to QgsMapLayer object
        self.soundLayer = self.soundLayer.layer()
        #get band count of selected layer
        bandCount = self.soundLayer.bandCount()
        bandList = []
        for q in range(bandCount):
            j = (self.soundLayer.bandName(q))
            bandList.append(j)
        self.comboBox_band.addItems(bandList)
        self.bandAction()
        
    def bandAction(self):
        #sets the user Choice to text format
        bandChoice = self.comboBox_band.currentText()
        #graps just the band number and creates variable for main .py script
        bandChoice = bandChoice[-1]
        adr_pluginDialog.bandAction.bandNum = bandChoice
        
    def okay(self):
        pass

    def cancel(self):
        self.close()
