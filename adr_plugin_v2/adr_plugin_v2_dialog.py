# -*- coding: utf-8 -*-
"""
/***************************************************************************
 adr_pluginDialog
                                 A QGIS plugin
 Version 1 of ADR QGIS Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-04-28
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Carley Belknap and J. Mitchell Green
        email                : belknacc@dukes.jmu.edu and green3jm@dukes.jmu.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.core import QgsProject
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from PyQt5 import QtCore
from PyQt5.QtCore import QObject, Qt
from qgis.utils import iface
from qgis.core import QgsLayerTreeLayer, QgsMapLayer, QgsRasterLayer, QgsLayerTreeNode, QgsMapLayer, QgsRaster, QgsRasterBandStats


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'adr_plugin_v2_dialog_base.ui'))


class adr_pluginDialog(QtWidgets.QDialog, FORM_CLASS):

    def __init__(self, parent=None):
        """Constructor."""
        super(adr_pluginDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.iface = iface

        #Objects for okay and cancel buttons for popup window
        self.accept = self.button_box.accepted.connect(self.okay)
        self.reject = self.button_box.rejected.connect(self.cancel)

        #Triggers the updateNormalizationValue() method whenever the "Update Scale" button is clicked.
        self.update_scale = self.button_update_scale.released.connect(self.updateNormalizationValues)

        #Gathers current GIS layers in QGIS and displays them in layer selection menu.
        self.layers = QgsProject.instance().layerTreeRoot().children()
        self.layer_selection.addItems([layer.name() for layer in self.layers])

        #Makes layer selection have check boxes.
        for row in range(self.layer_selection.count()):
            item = self.layer_selection.item(row)
            item.setFlags(item.flags() | QtCore.Qt.ItemIsUserCheckable)
            item.setCheckState(QtCore.Qt.Unchecked)

        #Triggers the clicked() method whenever a layer is double clicked.
        self.layer_selection.itemActivated.connect(self.clicked)

        #Data structure that holds normalization values scale.
        self.normalizationVals = {}
        #Data structure that layer/raster hearabiliy.
        self.layer_hearable = {}
        self.band_hearable = {}

        #Initializes the hearability of layers/rasters bands and the normalization values.
        #Layers and rasters are not hearable by default.
        for layer in self.layers:
            layer = layer.layer()
            #Sets the layers to initially not hearable.
            self.layer_hearable[layer.name()] = False
            self.band_hearable[layer.name()] = []
            self.normalizationVals[layer.name()] = {}
            for bandNumber in range(1, layer.bandCount()+1):
                #Sets the raster bands to initially not hearable.
                self.band_hearable[layer.name()].append(False)
                #Gets the statistical information about the raster band.
                stats = layer.dataProvider().bandStatistics(bandNumber, QgsRasterBandStats.All)
                #Normalization range is initially set to the data's minimum/maximum values.
                self.normalizationVals[layer.name()][layer.bandName(bandNumber)] = [stats.minimumValue, stats.maximumValue]

        #Updates the normalization section when a raster band is double clicked in the menu.
        self.comboBox_band.activated.connect(self.bandAction)

    #Action when the a layer is actived in the layer selection menu.
    def clicked(self, item):
        #Gets the text of the currently selected layer.
        self.userChoice = item.text()
        #Finds the currently selected layer.
        for i in self.layers:
            if i.name() == self.userChoice:
                #Updates the band hearability.
                try:
                    for row in range(self.band_selection.count()):
                        row_item = self.band_selection.item(row)
                        self.band_hearable[self.soundLayer.name()][row] = (row_item.checkState() == 2)
                except NameError:
                    continue

                #Updates the layer hearability.
                for row in range(self.layer_selection.count()):
                    row_item = self.layer_selection.item(row)
                    self.layer_hearable[self.layers[row].layer().name()] = (row_item.checkState() == 2)
                
                #Update the current layer.
                self.soundLayer = i

                #Clears all items from the band selection menu.
                self.band_selection.clear()

                #If a layer is hearable...
                if self.layer_hearable[self.soundLayer.name()]:
                    #Add all raster bands to the raster selection menu.
                    self.band_selection.addItems([self.soundLayer.layer().bandName(q) for q in range(1, self.soundLayer.layer().bandCount()+1)])
                        
                    #Modifies whether items in the raster menu are checked or not. 
                    for row in range(self.band_selection.count()):
                        row_item = self.band_selection.item(row)
                        #Makes menu items checkable.
                        row_item.setFlags(item.flags() | QtCore.Qt.ItemIsUserCheckable)
                        #Loads whether items are checked or not in the raster menu.
                        if self.band_hearable[self.soundLayer.name()][row]:
                            row_item.setCheckState(QtCore.Qt.Checked)
                        else:
                            row_item.setCheckState(QtCore.Qt.Unchecked)
                    #Loads the raster band options into the normalization value combo box.
                    self.bandOption()

    #Updates the normalization range based on the current input.
    def updateNormalizationValues(self):
        try:
            self.normalizationVals[self.soundLayer.name()][self.comboBox_band.currentText()] = [float(self.lineEdit_normalize_min.text()), float(self.lineEdit_normalize_max.text())]
            print("Updated normalization ranges successfully:", self.normalizationVals)
        except ValueError:
            print("Invalid input for normalization range (please enter numbers only).")

    #Loads the raster band options into the normalization value combo box.
    def bandOption(self):
        #Clears previous band comboBox values.
        self.comboBox_band.clear()
        #Convert from QgsLayerTreeLayer object to QgsMapLayer object.
        self.soundLayer = self.soundLayer.layer()
        #Gets the band count of selected layer.
        bandCount = self.soundLayer.bandCount()

        #Loads all of the layer's bands into the combo box.
        bandList = []
        for q in range(1, bandCount+1):
            j = (self.soundLayer.bandName(q))
            bandList.append(j)
        self.comboBox_band.addItems(bandList)

        #Updates the normalization input text fields.
        self.bandAction()
        
    #Updatest the normalization input text fields.
    def bandAction(self):
        #Sets the band choice to the current choice in the combo box
        bandChoice = self.comboBox_band.currentText()
        #If a band choice is selected...
        if bandChoice != "":
            #Grabs the "digit" from the band name.
            bandChoice = bandChoice[-1]
            bandNum = int(bandChoice)

            #Sets the input fields to the band's min and max values to normalize the data.
            self.lineEdit_normalize_min.setText(str(self.normalizationVals[self.soundLayer.name()][self.soundLayer.bandName(bandNum)][0]))
            self.lineEdit_normalize_max.setText(str(self.normalizationVals[self.soundLayer.name()][self.soundLayer.bandName(bandNum)][1]))

    #Returns all relevant data values collected from the dialog window.
    def getAllInputs(self):
        return self.normalizationVals, self.layer_hearable, self.band_hearable
        
    #Action when the "okay" button is pressed
    def okay(self):
        #Update the band selection hearability
        for row in range(self.band_selection.count()):
            row_item = self.band_selection.item(row)
            try:
                self.band_hearable[self.soundLayer.name()][row] = (row_item.checkState() == 2)
            except NameError:
                continue
            
        #Update layer selection hearability
        for row in range(self.layer_selection.count()):
            row_item = self.layer_selection.item(row)
            self.layer_hearable[self.layers[row].layer().name()] = (row_item.checkState() == 2)

    #Action when the "cancel" button is pressed
    def cancel(self):
        self.close()
